#ifndef _ALTERA_HPS_0_H_
#define _ALTERA_HPS_0_H_

/*
 * This file was automatically generated by the swinfo2header utility.
 * 
 * Created from SOPC Builder system 'soc_system' in
 * file 'soc_system.sopcinfo'.
 */

/*
 * This file contains macros for module 'hps_0' and devices
 * connected to the following masters:
 *   h2f_axi_master
 *   h2f_lw_axi_master
 * 
 * Do not include this header file and another header file created for a
 * different module or master group at the same time.
 * Doing so may result in duplicate macro names.
 * Instead, use the system header file which has macros with unique names.
 */

/*
 * Macros for device 'onchip_memory', class 'altera_avalon_onchip_memory2'
 * The macros are prefixed with 'ONCHIP_MEMORY_'.
 * The prefix is the slave descriptor.
 */
#define ONCHIP_MEMORY_COMPONENT_TYPE altera_avalon_onchip_memory2
#define ONCHIP_MEMORY_COMPONENT_NAME onchip_memory
#define ONCHIP_MEMORY_BASE 0x0
#define ONCHIP_MEMORY_SPAN 262144
#define ONCHIP_MEMORY_END 0x3ffff
#define ONCHIP_MEMORY_ALLOW_IN_SYSTEM_MEMORY_CONTENT_EDITOR 0
#define ONCHIP_MEMORY_ALLOW_MRAM_SIM_CONTENTS_ONLY_FILE 0
#define ONCHIP_MEMORY_CONTENTS_INFO ""
#define ONCHIP_MEMORY_DUAL_PORT 1
#define ONCHIP_MEMORY_GUI_RAM_BLOCK_TYPE AUTO
#define ONCHIP_MEMORY_INIT_CONTENTS_FILE soc_system_onchip_memory
#define ONCHIP_MEMORY_INIT_MEM_CONTENT 1
#define ONCHIP_MEMORY_INSTANCE_ID NONE
#define ONCHIP_MEMORY_NON_DEFAULT_INIT_FILE_ENABLED 0
#define ONCHIP_MEMORY_RAM_BLOCK_TYPE AUTO
#define ONCHIP_MEMORY_READ_DURING_WRITE_MODE DONT_CARE
#define ONCHIP_MEMORY_SINGLE_CLOCK_OP 1
#define ONCHIP_MEMORY_SIZE_MULTIPLE 1
#define ONCHIP_MEMORY_SIZE_VALUE 262144
#define ONCHIP_MEMORY_WRITABLE 1
#define ONCHIP_MEMORY_MEMORY_INFO_DAT_SYM_INSTALL_DIR SIM_DIR
#define ONCHIP_MEMORY_MEMORY_INFO_GENERATE_DAT_SYM 1
#define ONCHIP_MEMORY_MEMORY_INFO_GENERATE_HEX 1
#define ONCHIP_MEMORY_MEMORY_INFO_HAS_BYTE_LANE 0
#define ONCHIP_MEMORY_MEMORY_INFO_HEX_INSTALL_DIR QPF_DIR
#define ONCHIP_MEMORY_MEMORY_INFO_MEM_INIT_DATA_WIDTH 32
#define ONCHIP_MEMORY_MEMORY_INFO_MEM_INIT_FILENAME soc_system_onchip_memory

/*
 * Macros for device 'i2c_opencores_camera', class 'i2c_opencores'
 * The macros are prefixed with 'I2C_OPENCORES_CAMERA_'.
 * The prefix is the slave descriptor.
 */
#define I2C_OPENCORES_CAMERA_COMPONENT_TYPE i2c_opencores
#define I2C_OPENCORES_CAMERA_COMPONENT_NAME i2c_opencores_camera
#define I2C_OPENCORES_CAMERA_BASE 0x0
#define I2C_OPENCORES_CAMERA_SPAN 128
#define I2C_OPENCORES_CAMERA_END 0x7f

/*
 * Macros for device 'i2c_opencores_mipi', class 'i2c_opencores'
 * The macros are prefixed with 'I2C_OPENCORES_MIPI_'.
 * The prefix is the slave descriptor.
 */
#define I2C_OPENCORES_MIPI_COMPONENT_TYPE i2c_opencores
#define I2C_OPENCORES_MIPI_COMPONENT_NAME i2c_opencores_mipi
#define I2C_OPENCORES_MIPI_BASE 0x20
#define I2C_OPENCORES_MIPI_SPAN 128
#define I2C_OPENCORES_MIPI_END 0x9f

/*
 * Macros for device 'mipi_pwdn_n', class 'altera_avalon_pio'
 * The macros are prefixed with 'MIPI_PWDN_N_'.
 * The prefix is the slave descriptor.
 */
#define MIPI_PWDN_N_COMPONENT_TYPE altera_avalon_pio
#define MIPI_PWDN_N_COMPONENT_NAME mipi_pwdn_n
#define MIPI_PWDN_N_BASE 0x40
#define MIPI_PWDN_N_SPAN 64
#define MIPI_PWDN_N_END 0x7f
#define MIPI_PWDN_N_BIT_CLEARING_EDGE_REGISTER 0
#define MIPI_PWDN_N_BIT_MODIFYING_OUTPUT_REGISTER 0
#define MIPI_PWDN_N_CAPTURE 0
#define MIPI_PWDN_N_DATA_WIDTH 1
#define MIPI_PWDN_N_DO_TEST_BENCH_WIRING 0
#define MIPI_PWDN_N_DRIVEN_SIM_VALUE 0
#define MIPI_PWDN_N_EDGE_TYPE NONE
#define MIPI_PWDN_N_FREQ 50000000
#define MIPI_PWDN_N_HAS_IN 0
#define MIPI_PWDN_N_HAS_OUT 1
#define MIPI_PWDN_N_HAS_TRI 0
#define MIPI_PWDN_N_IRQ_TYPE NONE
#define MIPI_PWDN_N_RESET_VALUE 0

/*
 * Macros for device 'mipi_reset_n', class 'altera_avalon_pio'
 * The macros are prefixed with 'MIPI_RESET_N_'.
 * The prefix is the slave descriptor.
 */
#define MIPI_RESET_N_COMPONENT_TYPE altera_avalon_pio
#define MIPI_RESET_N_COMPONENT_NAME mipi_reset_n
#define MIPI_RESET_N_BASE 0x50
#define MIPI_RESET_N_SPAN 64
#define MIPI_RESET_N_END 0x8f
#define MIPI_RESET_N_BIT_CLEARING_EDGE_REGISTER 0
#define MIPI_RESET_N_BIT_MODIFYING_OUTPUT_REGISTER 0
#define MIPI_RESET_N_CAPTURE 0
#define MIPI_RESET_N_DATA_WIDTH 1
#define MIPI_RESET_N_DO_TEST_BENCH_WIRING 0
#define MIPI_RESET_N_DRIVEN_SIM_VALUE 0
#define MIPI_RESET_N_EDGE_TYPE NONE
#define MIPI_RESET_N_FREQ 50000000
#define MIPI_RESET_N_HAS_IN 0
#define MIPI_RESET_N_HAS_OUT 1
#define MIPI_RESET_N_HAS_TRI 0
#define MIPI_RESET_N_IRQ_TYPE NONE
#define MIPI_RESET_N_RESET_VALUE 0

/*
 * Macros for device 'alt_vip_cl_clp_1', class 'alt_vip_cl_clp'
 * The macros are prefixed with 'ALT_VIP_CL_CLP_1_'.
 * The prefix is the slave descriptor.
 */
#define ALT_VIP_CL_CLP_1_COMPONENT_TYPE alt_vip_cl_clp
#define ALT_VIP_CL_CLP_1_COMPONENT_NAME alt_vip_cl_clp_1
#define ALT_VIP_CL_CLP_1_BASE 0x60
#define ALT_VIP_CL_CLP_1_SPAN 32
#define ALT_VIP_CL_CLP_1_END 0x7f

/*
 * Macros for device 'video_dma_controller_0', class 'altera_up_avalon_video_dma_controller'
 * The macros are prefixed with 'VIDEO_DMA_CONTROLLER_0_'.
 * The prefix is the slave descriptor.
 */
#define VIDEO_DMA_CONTROLLER_0_COMPONENT_TYPE altera_up_avalon_video_dma_controller
#define VIDEO_DMA_CONTROLLER_0_COMPONENT_NAME video_dma_controller_0
#define VIDEO_DMA_CONTROLLER_0_BASE 0x80
#define VIDEO_DMA_CONTROLLER_0_SPAN 16
#define VIDEO_DMA_CONTROLLER_0_END 0x8f

/*
 * Macros for device 'alt_vip_vfr_vga', class 'alt_vip_vfr'
 * The macros are prefixed with 'ALT_VIP_VFR_VGA_'.
 * The prefix is the slave descriptor.
 */
#define ALT_VIP_VFR_VGA_COMPONENT_TYPE alt_vip_vfr
#define ALT_VIP_VFR_VGA_COMPONENT_NAME alt_vip_vfr_vga
#define ALT_VIP_VFR_VGA_BASE 0x100
#define ALT_VIP_VFR_VGA_SPAN 512
#define ALT_VIP_VFR_VGA_END 0x2ff

/*
 * Macros for device 'alt_vip_mix_0', class 'alt_vip_mix'
 * The macros are prefixed with 'ALT_VIP_MIX_0_'.
 * The prefix is the slave descriptor.
 */
#define ALT_VIP_MIX_0_COMPONENT_TYPE alt_vip_mix
#define ALT_VIP_MIX_0_COMPONENT_NAME alt_vip_mix_0
#define ALT_VIP_MIX_0_BASE 0x200
#define ALT_VIP_MIX_0_SPAN 1024
#define ALT_VIP_MIX_0_END 0x5ff

/*
 * Macros for device 'sysid_qsys', class 'altera_avalon_sysid_qsys'
 * The macros are prefixed with 'SYSID_QSYS_'.
 * The prefix is the slave descriptor.
 */
#define SYSID_QSYS_COMPONENT_TYPE altera_avalon_sysid_qsys
#define SYSID_QSYS_COMPONENT_NAME sysid_qsys
#define SYSID_QSYS_BASE 0x10000
#define SYSID_QSYS_SPAN 8
#define SYSID_QSYS_END 0x10007
#define SYSID_QSYS_ID 2899645186
#define SYSID_QSYS_TIMESTAMP 1527691671

/*
 * Macros for device 'led', class 'altera_avalon_pio'
 * The macros are prefixed with 'LED_'.
 * The prefix is the slave descriptor.
 */
#define LED_COMPONENT_TYPE altera_avalon_pio
#define LED_COMPONENT_NAME led
#define LED_BASE 0x10040
#define LED_SPAN 64
#define LED_END 0x1007f
#define LED_BIT_CLEARING_EDGE_REGISTER 0
#define LED_BIT_MODIFYING_OUTPUT_REGISTER 0
#define LED_CAPTURE 0
#define LED_DATA_WIDTH 10
#define LED_DO_TEST_BENCH_WIRING 0
#define LED_DRIVEN_SIM_VALUE 0
#define LED_EDGE_TYPE NONE
#define LED_FREQ 50000000
#define LED_HAS_IN 0
#define LED_HAS_OUT 1
#define LED_HAS_TRI 0
#define LED_IRQ_TYPE NONE
#define LED_RESET_VALUE 0

/*
 * Macros for device 'sw', class 'altera_avalon_pio'
 * The macros are prefixed with 'SW_'.
 * The prefix is the slave descriptor.
 */
#define SW_COMPONENT_TYPE altera_avalon_pio
#define SW_COMPONENT_NAME sw
#define SW_BASE 0x10080
#define SW_SPAN 64
#define SW_END 0x100bf
#define SW_IRQ 2
#define SW_BIT_CLEARING_EDGE_REGISTER 1
#define SW_BIT_MODIFYING_OUTPUT_REGISTER 0
#define SW_CAPTURE 1
#define SW_DATA_WIDTH 10
#define SW_DO_TEST_BENCH_WIRING 0
#define SW_DRIVEN_SIM_VALUE 0
#define SW_EDGE_TYPE ANY
#define SW_FREQ 50000000
#define SW_HAS_IN 1
#define SW_HAS_OUT 0
#define SW_HAS_TRI 0
#define SW_IRQ_TYPE EDGE
#define SW_RESET_VALUE 0

/*
 * Macros for device 'key', class 'altera_avalon_pio'
 * The macros are prefixed with 'KEY_'.
 * The prefix is the slave descriptor.
 */
#define KEY_COMPONENT_TYPE altera_avalon_pio
#define KEY_COMPONENT_NAME key
#define KEY_BASE 0x100c0
#define KEY_SPAN 64
#define KEY_END 0x100ff
#define KEY_IRQ 1
#define KEY_BIT_CLEARING_EDGE_REGISTER 1
#define KEY_BIT_MODIFYING_OUTPUT_REGISTER 0
#define KEY_CAPTURE 1
#define KEY_DATA_WIDTH 4
#define KEY_DO_TEST_BENCH_WIRING 0
#define KEY_DRIVEN_SIM_VALUE 0
#define KEY_EDGE_TYPE FALLING
#define KEY_FREQ 50000000
#define KEY_HAS_IN 1
#define KEY_HAS_OUT 0
#define KEY_HAS_TRI 0
#define KEY_IRQ_TYPE EDGE
#define KEY_RESET_VALUE 0

/*
 * Macros for device 'jtag_uart', class 'altera_avalon_jtag_uart'
 * The macros are prefixed with 'JTAG_UART_'.
 * The prefix is the slave descriptor.
 */
#define JTAG_UART_COMPONENT_TYPE altera_avalon_jtag_uart
#define JTAG_UART_COMPONENT_NAME jtag_uart
#define JTAG_UART_BASE 0x20000
#define JTAG_UART_SPAN 32
#define JTAG_UART_END 0x2001f
#define JTAG_UART_IRQ 0
#define JTAG_UART_READ_DEPTH 64
#define JTAG_UART_READ_THRESHOLD 8
#define JTAG_UART_WRITE_DEPTH 64
#define JTAG_UART_WRITE_THRESHOLD 8

/*
 * Macros for device 'sdram', class 'altera_avalon_new_sdram_controller'
 * The macros are prefixed with 'SDRAM_'.
 * The prefix is the slave descriptor.
 */
#define SDRAM_COMPONENT_TYPE altera_avalon_new_sdram_controller
#define SDRAM_COMPONENT_NAME sdram
#define SDRAM_BASE 0x4000000
#define SDRAM_SPAN 67108864
#define SDRAM_END 0x7ffffff
#define SDRAM_CAS_LATENCY 3
#define SDRAM_CONTENTS_INFO 
#define SDRAM_INIT_NOP_DELAY 0.0
#define SDRAM_INIT_REFRESH_COMMANDS 2
#define SDRAM_IS_INITIALIZED 1
#define SDRAM_POWERUP_DELAY 100.0
#define SDRAM_REFRESH_PERIOD 15.625
#define SDRAM_REGISTER_DATA_IN 1
#define SDRAM_SDRAM_ADDR_WIDTH 25
#define SDRAM_SDRAM_BANK_WIDTH 2
#define SDRAM_SDRAM_COL_WIDTH 10
#define SDRAM_SDRAM_DATA_WIDTH 16
#define SDRAM_SDRAM_NUM_BANKS 4
#define SDRAM_SDRAM_NUM_CHIPSELECTS 1
#define SDRAM_SDRAM_ROW_WIDTH 13
#define SDRAM_SHARED_DATA 0
#define SDRAM_SIM_MODEL_BASE 0
#define SDRAM_STARVATION_INDICATOR 0
#define SDRAM_TRISTATE_BRIDGE_SLAVE ""
#define SDRAM_T_AC 5.5
#define SDRAM_T_MRD 3
#define SDRAM_T_RCD 20.0
#define SDRAM_T_RFC 70.0
#define SDRAM_T_RP 20.0
#define SDRAM_T_WR 14.0
#define SDRAM_MEMORY_INFO_DAT_SYM_INSTALL_DIR SIM_DIR
#define SDRAM_MEMORY_INFO_GENERATE_DAT_SYM 1
#define SDRAM_MEMORY_INFO_MEM_INIT_DATA_WIDTH 16


#endif /* _ALTERA_HPS_0_H_ */
